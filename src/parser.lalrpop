use crab_shell::ast;

grammar;

pub Statement: ast::Stmt = {
    Cmd => ast::Stmt::new(<>),
    <c:Cmd> <e:End> <mut s:Statement> => {s.new_cmd(c, e); s}
}

Cmd: ast::Cmd = {
    Word => ast::Cmd::new(<>),
    "\"" <w:Word*> "\"" => {
        let mut s = String::from("");
        for word in w.iter() {
            s = format!("{} {}", s, word);
        }
        ast::Cmd::new(s)
    },
    "'" <w:Word*> "'" => {
        let mut s = String::from("");
        for word in w.iter() {
            s = format!("{} {}", s, word);
        }
        ast::Cmd::new(s)
    },
    <w:Word> <mut c:Cmd> => {c.push(w); c},
    "\"" <w:Word*> "\"" <mut c:Cmd> => {
        let mut s = String::from("");
        for word in w.iter() {
            s = format!("{} {}", s, word);
        }
        c.push(s);
        c
    },
    "'" <w:Word*> "'" <mut c:Cmd> => {
        let mut s = String::from("");
        for word in w.iter() {
            s = format!("{} {}", s, word);
        }
        c.push(s);
        c
    },
};

End: ast::Line = {
    ";" => ast::Line::End,
    "&" => ast::Line::Bg,
}
Word: String = {
    r"[\w+\-_./]+" => <>.to_string(),
    ! => String::from(""),
}

// vim: ft=rust
